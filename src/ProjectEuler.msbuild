<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <Configuration>Release</Configuration>
    <Platform>Any CPU</Platform>
    <SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">$(MSBuildThisFileDirectory)</SolutionDir>
    <SolutionFile>$(SolutionDir)ProjectEuler.sln</SolutionFile>
    <OutputPath>$(SolutionDir)\BuildOutput</OutputPath>
    <RunCodeAnalysis Condition="'$(RunCodeAnalysis)' == '' ">true</RunCodeAnalysis>
    <RunTests Condition="'$(RunTests)' == ''">true</RunTests>
    <BuildProperties>Platform=$(Platform);OutputPath=$(OutputPath)</BuildProperties>
    <DotNetExecPrefix Condition="'$(OS)' == 'Unix'">mono </DotNetExecPrefix>
    <EnableCodeCoverage Condition="'$(EnableCodeCoverage)' == '' and '$(OS)' != 'Unix'">true</EnableCodeCoverage>
    <CodeTaskFactoryAssembly>$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</CodeTaskFactoryAssembly>
  </PropertyGroup>
  <Target Name="Clean">
    <MSBuild Targets="Clean" Projects="$(SolutionFile)" Properties="Configuration=$(Configuration);$(BuildProperties)" />
  </Target>
  <Target Name="Build" DependsOnTargets="RestorePackages">
    <MSBuild Targets="Build" Projects="$(SolutionFile)" Properties="Configuration=$(Configuration);$(BuildProperties)" />
  </Target>
  <Target Name="Rebuild" DependsOnTargets="RestorePackages">
    <MSBuild Targets="Rebuild" Projects="$(SolutionFile)" Properties="Configuration=$(Configuration);$(BuildProperties)" />
  </Target>
  <Target Name="BeforeBuild" BeforeTargets="Build;Rebuild">
    <CallTarget Targets="UpdateAssemblyConfiguration" Condition="'$(OS)' != 'Unix'" />
  </Target>
  <Target Name="AfterBuild" AfterTargets="Build;Rebuild">
    <CallTarget Targets="Test" Condition="'$(RunTests)' == 'true'" />
  </Target>
  <Target Name="RestorePackages">
    <PropertyGroup>
      <NuGetToolsPath>$([System.IO.Path]::Combine($(SolutionDir), "Tools", "NuGet"))</NuGetToolsPath>
      <NuGetExePath>$(NuGetToolsPath)\NuGet.exe</NuGetExePath>
      <RequireRestoreConsent>false</RequireRestoreConsent>
    </PropertyGroup>
    <Message Text="Restoring NuGet packages..." Importance="normal" />
    <Exec Condition="'$(OS)' == 'Unix'" Command="chmod +x %22$(NuGetExePath)%22" />
    <Exec Command="$(DotNetExecPrefix)%22$(NuGetExePath)%22 restore %22$(SolutionFile)%22" LogStandardErrorAsError="true" />
  </Target>
  <Target Name="Test">
    <ItemGroup Condition="'$(TestTool)' == ''">
      <TestTool Include="$(SolutionDir)packages\xunit.runner.console.*\tools\xunit.console.exe" />
    </ItemGroup>
    <PropertyGroup Condition="'$(TestTool)' == ''">
      <TestTool>%22@(TestTool)%22</TestTool>
    </PropertyGroup>
    <ItemGroup>
      <TestContainer Include="$(OutputPath)\*Tests*.dll" />
    </ItemGroup>
    <PropertyGroup>
      <_TestCommand>@(TestContainer->'%22%(fullpath)%22', ' ')</_TestCommand>
      <_CodeCoverageXml>$(OutputPath)\ProjectEuler_coverage.xml</_CodeCoverageXml>
      <_OpenCoverVersion>4.6.166</_OpenCoverVersion>
      <_OpenCoverTool>%22$(SolutionDir)packages\OpenCover.$(_OpenCoverVersion)\Tools\OpenCover.Console.exe%22</_OpenCoverTool>
      <_OpenCoverOptions>-register:user -hideskipped:All -mergebyhash -skipautoprops -filter:%22+[*]* -[xunit*]* -[*Tests]*%22 -returntargetcode -output:%22$(_CodeCoverageXml)%22</_OpenCoverOptions>
    </PropertyGroup>
    <Exec Condition="'$(OS)' == 'Unix'" Command="chmod +x %22$(TestTool)%22" />
    <Exec Condition="'$(EnableCodeCoverage)' != 'true'" Command="$(DotNetExecPrefix)$(TestTool) $(_TestCommand)" WorkingDirectory="$(OutputPath)" />
    <Exec Condition="'$(EnableCodeCoverage)' == 'true'" Command="$(_OpenCoverTool) $(_OpenCoverOptions) -target:$(TestTool) -targetargs:$(_TestCommand)" WorkingDirectory="$(OutputPath)" />
  </Target>
  <Target Name="UpdateAssemblyConfiguration">
    <PropertyGroup Condition="'$(APPVEYOR)' != ''">
      <GitBranch>$(APPVEYOR_REPO_BRANCH)</GitBranch>
      <GitCommit>$(APPVEYOR_REPO_COMMIT)</GitCommit>
    </PropertyGroup>
    <UpdateAssemblyConfiguration Condition="$(GitBranch) != '' and $(GitCommit) != ''" AssemblyInfoPath="$(SolutionDir)CommonAssemblyInfo.cs" Branch="$(GitBranch)" CommitId="$(GitCommit)" />
  </Target>
  <UsingTask TaskName="GetPrereleaseVersionForCIBuild"
             TaskFactory="CodeTaskFactory"
             AssemblyFile="$(CodeTaskFactoryAssembly)" >
    <ParameterGroup>
      <AssemblyVersion Required="true" />
      <CIBuildNumber Required="true" />
      <ReleasesFileName Required="true" />
      <PrereleaseVersion Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.Linq" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        string lastReleasedVersionString = System.IO.File.ReadAllLines(ReleasesFileName).LastOrDefault();
        Version lastReleasedVersion = new Version(lastReleasedVersionString ?? "1.0.0.0");
        Version thisVersion = new Version(AssemblyVersion);
        int thisBuildNumber = int.Parse(CIBuildNumber, System.Globalization.CultureInfo.InvariantCulture);

        if (lastReleasedVersion.Major == thisVersion.Major &&
            lastReleasedVersion.Minor == thisVersion.Minor)
        {
            // If the version number has not increased, just use the build
            // number as its guaranteed to be larger than the last number
            PrereleaseVersion = thisBuildNumber.ToString("000", System.Globalization.CultureInfo.InvariantCulture);
        }
        else
        {
            // Determine the offset between this build and the build of the last version
            PrereleaseVersion = (thisBuildNumber - lastReleasedVersion.Build).ToString("000", System.Globalization.CultureInfo.InvariantCulture);
        }
      ]]>
      </Code>
    </Task>
  </UsingTask>
  <UsingTask
    TaskName="UpdateAssemblyConfiguration"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="$(CodeTaskFactoryAssembly)" >
    <ParameterGroup>
      <AssemblyInfoPath Required="true" />
      <CommitId Required="true" />
      <Branch Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          string content = File.ReadAllText(AssemblyInfoPath);
          content = content.Replace("[assembly: AssemblyConfiguration(\"\")]", "[assembly: AssemblyConfiguration(\"" + CommitId + "|" + Branch + "\")]");
          File.WriteAllText(AssemblyInfoPath, content);
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
